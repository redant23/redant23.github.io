---
layout: post
title:  "180219 자바스크립트 일기"
date:   2018-02-19 23:59:59
author: redant
categories: javascript
---

과제를 완료하지 못했다. 못한 채로 제출할 예정.

수업시간. 다음 과제 설명

필수과제는 Javascript Basics2 

선택과제는 underscore 직접 구현해보는 것

내가 쓴 코드는 최대한 이해한 상태로 넘어가야 한다.


오늘 배운 것.

다솔님한테 dataset 활용하는 법을 배웠다.
html 태그 내에서 `data-num="숫자"` 이라고 입력하면 자바스크립트 이벤트 핸들러 내에서 `배열[e.target.dataset.num]`을 활용하여 현재 이벤트가 실행되고 있는 배열의 값을 가져와 활용 할 수 있다. 
이걸 활용하여 토글 방향 변경하는 것을 for 구문 대신 넣어서 해결했다.



---

// arguments

배열처럼 생긴 객체

Index, length값 사용가능


// Scope 

전역함수, 내부함수 구분

즉시실행함수 IIFE (Immediately Invoked Function Expression) 
'(function(  ) { })();'
	영역구분을 확실하게 할 수 있다. 


// hoisting (올리는것)

변수 선언 부분들(선언만 됨)이 함수(스코프) 안에서 윗줄로 올라가는 것
예를 들어 var b = 2 라고 했을 때, 선언 var b; 과 b = 2로 구분되서 선언부분만 위로 올라감.

Function Expression 함수표현식
	호이스팅과 연관이 많음
	var a = function (){}; 같은 방식

Function Declaration 함수 선언식
	가장 위로 호이스팅 되서 어디서 실행시켜도 값이 잘 나옴



// this

	키워드
	"나" 랑 비슷함
	주로 함수 안에서 사용. 밖에서 사용할 경우 window와 같음
	this를 사용하는 해당 함수를 "어떻게" 호출시켜 실행하느냐에 따라 바뀜.
	최후에 호출한 형태를 바라보면 this가 누군지 알 수 있다. 일단은.
	함수 실행하는 방법엔 4가지가 있다.
	
	1. Regular function call - 일반 함수 실행 방식
	function foo () {
		console.log(this); === global object window가 나옴
	}
	foo();

	1-2. in strict mode (엄격한 모드)
	
	'use strict';
	function foo () {
		console.log(this); === undefined // window가 나오는 건 일종의 버그라 undefined
	}
	foo();

	2. Dot Notation 

	var age = 100;
	var ken ={
		age: 35;
		foo: function foo() {
			console.log(this.age); === this는 . 앞에 있는 ken을 나타냄. 따라서 35가 찍힘
		}
	};
	ken.foo();

// 수요일에 this 마저 하고 chain 한다. 오늘 수업 끝.








